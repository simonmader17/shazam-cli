#!/usr/bin/env bash

# Small script to run shazam, with notifications.
# Requires shazam, jq, notify-send, dunstify(optional).

set -e

err_msg_exit() {
    # Print an error to stderr and exit.
    printf "%s\n" "$*" >&2
    exit 1
}

type shazam >/dev/null || err_msg_exit "'shazam' not found."
type jq >/dev/null || err_msg_exit "'jq' not found."
type dunstify >/dev/null || err_msg_exit "'dunstify' not found."

COVERT_ART_FILE="/tmp/shazam/coverart.jpg"

# set the source to the monitor of the current output sink
SOURCE="$(ffmpeg -sinks pulse 2>/dev/null | grep '\*' | cut -d' ' -f2).monitor"
if ! ffmpeg -sources pulse 2>/dev/null | grep -q "$SOURCE"; then
    # exit if doesn't exist
    echo "Source monitor \"$SOURCE\" not found." >&2
    exit 1
fi

send_notification_for_duration() {
	for i in {1..5}; do # 5 seconds duration
		dunstify -h string:x-dunst-stack-tag:shazam -a "Shazam" -h "int:value:$(echo "scale=2; $i/5*100" | bc -l)" "Shazam" "Recording audio for 5s"
		sleep 1
	done
}
send_notification_for_duration &
RESPONSE="$(shazam -s "$SOURCE")"

N_MATCHES="$(echo "$RESPONSE" | jq -r '.matches | length')"
if [ "$N_MATCHES" = 0 ]; then
    dunstify -h string:x-dunst-stack-tag:shazam -a "Shazam" "Shazam" "Failed to identify song."
    exit 2
fi

ARTIST="$(echo "$RESPONSE" | jq -r ".track.subtitle")"
TITLE="$(echo "$RESPONSE" | jq -r ".track.title")"
COVER_ART_URL="$(echo "$RESPONSE" | jq -r ".track.images.coverart")"

curl --silent "$COVER_ART_URL" -o "$COVERT_ART_FILE"

case "$(dunstify -h string:x-dunst-stack-tag:shazam -a "Shazam" -i "$COVERT_ART_FILE" \
	--action="apple music,apple music" \
	--action="youtube,youtube" \
	"$ARTIST" "$TITLE")" in
	"apple music")
	AM_LINK="$(echo "$RESPONSE" | jq -r ".track.hub.options[0].actions[0].uri")"]
	xdg-open "$AM_LINK"
	;;
"youtube")
	YT_LINK="$(echo "$RESPONSE" | jq -r '.track.sections | map(select(.type == "VIDEO"))[0].youtubeurl.actions[0].uri')"
	xdg-open "$YT_LINK"
	;;
esac
